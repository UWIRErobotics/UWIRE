<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head id="ctl00_ctl00_Head1"><title>
	PAGE: 8b5: Connectionism: Backpropogation
</title>
    <script language="javascript" type="text/javascript">
    var Page = function() { };
    </script>
    
    

<base href="https://uwangel.uwaterloo.ca/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a00AA/"></base>
<link rel="stylesheet" type="text/css" href="/AngelThemes/Stylesheets/Professional.css" /><link rel="stylesheet" type="text/css" href="/AngelThemes/Stylesheets/Professional.css" /><SCRIPT LANGUAGE="JavaScript">if(!run){ document.write('<SCRI' + 'PT LANGUAGE="JavaScript" src="/uwangel/jscript/Localization.js"><\/SCRIPT>'); var run = true; }</SCRIPT><script type="text/javascript" language="javascript" src="/uwangel/InlineEditor/fckeditor.js"></script><script type="text/javascript" language="javascript" src="/uwangel/InlineEditor/inline.asp"></script>

<script language="javascript" type="text/javascript">
<!--//
var gblnRefreshIndex = false;
var gstrAPI = '/uwangel/api/default.asp';
var gstrAngelApp = 'CRSCNT';
var gstrWCI = '';
var gstrWCE = '';
var gstrFinalWCI = '';
var gstrFinalWCE = '';
var gstrScriptURL = 'https://uwangel.uwaterloo.ca/uwangel/section/content/Default.asp?WCU=CRSCNT';
var gstrPostURL = '';
var gstrBaseHref = 'https://uwangel.uwaterloo.ca/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a00AA';
var gstrStylesheet = '/AngelThemes/Stylesheets/default.css';
var glngUserRights = 2;
var gstrUserID = 'jgorchyn';
var gstrSectionID = 'UW-MCL-C-090424-153038';
var gstrRootID = 'ROOT';
var gstrParentID = 'c3b34124d0b1213d494deb2bf10a0083';
var gstrObjectID = 'c3b34124d0b1213d494deb2bf10a00AB';
var gstrObjectType = 'PAGE';
var gstrBaseType = 'PAGE';
var gstrEntryID = 'c3b34124d0b1213d494deb2bf10a00AA';
var gstrEntrySection = 'UW-MCL-C-090424-153038';
var gstrEntryTitle = '8b5: Connectionism: Backpropogation';
var gstrBoardID = '';
var gstrBoardTitle = '';
var gstrShortcutID = '';
var gstrShortcuts = '';
var gblnSubmit = true;
var gblnForceSubmitting = false;

//The same variables, but in a hierarchical structure
var LO = (function(){
    var constructor = function(){
    }
    
    return constructor;
})();

LO.API = gstrAPI;
LO.angelApp = gstrAngelApp;
LO.scriptURL = gstrScriptURL;
LO.postURL = '';
LO.baseHref = gstrBaseHref;
LO.stylesheet = gstrStylesheet;
LO.userRights = glngUserRights;
LO.userID = gstrUserID;
LO.sectionID = gstrSectionID;
LO.rootID = gstrRootID;
LO.parentID = gstrParentID;
LO.objectID = gstrObjectID;
LO.objectType = gstrObjectType;
LO.baseType = gstrBaseType;
LO.entryID = gstrEntryID;
LO.entrySection = gstrEntrySection;
LO.entryTitle = gstrEntryTitle;

var LearningObject = LO;

//-->
</script></head>
<body id="c3b34124d0b1213d494deb2bf10a00AA" class="bodyLessons cmTypePAGE PGDISPLAY_PAGE PGDISPLAY_PAGE_RESPOND">
    
    


    <form name="aspnetForm" method="post" action="Page.aspx?EntryId=c3b34124d0b1213d494deb2bf10a00AA&amp;caller=%2fuwangel%2fsection%2fcontent%2fdefault.asp&amp;WCI=pgDisplay_Object&amp;WCU=CRSCNT&amp;Preview=0" id="aspnetForm">
<div>
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwULLTE2NDYyNDgyNTQPZBYCZg9kFgJmD2QWAgIKD2QWAgIDDw8WAh4HVmlzaWJsZWhkZGQ=" />
</div>


<script src="/uwangel/JScript/HelpPopup.js" type="text/javascript"></script>
<script src="/uwangel/jscript/jsActions.js" type="text/javascript"></script>
        <div class="normalDiv">
            <div class="normalSpan">
                <div id=”subject_image”></div>
                
    

    <div style="margin-top:.7em;width:100%">
        
    </div>

            </div>
        </div>
    

<script type="text/javascript">
//<![CDATA[
issueRedirect((parent && parent.location && parent.frames && parent.frames.length > 0 && parent.frames[0].name == 'lsn_header') ? parent : null);//]]>
</script>
</form>
    
    <div class="normalDiv">
    <div class="normalSpan">    
        
    
    <div id="ActionMessages"></div>
    
    <div class="normalSpan">
        <DIV>
<DIV id=row1>
<H3>8b5: Connectionism: Backpropogation</H3>
<P>Let us examine how multilayer networks learn using the backpropagation procedure.&nbsp;First, we need to define what sort of problem the network will solve.&nbsp;A classic example is the mine detection problem (Gorman and Sejnowski 1988).&nbsp;In the Navy, sonar operators are trained to use sonar data to <STRONG>distinguish rocks from mines</STRONG>.&nbsp;A multilayered network can be trained to perform this task too.&nbsp;The input nodes can be taken to represent the energy of the sonar response at a given frequency.&nbsp;In the Gorman &amp; Sejnowski model, there were 60 inputs nodes corresponding to 60 sonar frequencies.&nbsp;(Think of the signal you might receive from tuning your radio to 60 different channels.)&nbsp;The output layer consisted of two nodes, a &#8220;rock&#8221; node and a &#8220;mine&#8221; node.&nbsp;The hidden layer varied anywhere from 0 to 24 nodes.&nbsp;</P>
<P>A set of example was obtained from sonar soundings some of which contained mines but some of which contained only rocks.&nbsp;</P>
<P>The backpropagation procedure was used to train the network to correctly classify the examples from the set (up to a high rate of success).&nbsp;The procedure works roughly as follows:</P>
<OL>
<LI>Set weights randomly.&nbsp;</LI>
<LI>Present an example to the network and allow it to settle.</LI>
<LI>Determine the error of each node in the output layer.</LI>
<LI>For each &#8220;previous&#8221; layer in the network, update the connection weights to minimize the error.</LI>
<OL>
<LI>If a receiving node was too active, reduce connection weights to it.</LI>
<LI>If a receiving node was not active enough, increase connection weights to it.</LI></OL>
<LI>Repeat (2) until error is no longer reduced or time is up.</LI></OL>
<P>Step four involves a mathematical technique equivalent to multiple regression, but we do not need to go into details here.&nbsp;</P>
<P>There are two points about this approach that it would instructive to make here.</P>
<OL>
<LI>A network configured to work in this fashion is known as a <STRONG>feedforward</STRONG> network.&nbsp;That is, activation arrives at the input layer and feeds forward towards the output layer.</LI>
<LI>This learning procedure is called <STRONG>backpropagation</STRONG> because adjustments to connection weights due to errors begin at the output layer and move backward towards the input layer.</LI></OL>
<P>This situation is depicted in the figure below.</P>
<P><IMG alt="" hspace=50 src="/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a00AA/situation.PNG?6515" border=0></P>
<P>Usually, the network is exposed to the whole training set many times (each time is known as an <STRONG>epoch</STRONG>).&nbsp;After a suitable number of epochs, the network is tested against a set of examples that it has not seen before.&nbsp;In the case of the mine detector network, a network with only 3 hidden nodes learned to perform at a 98% effectiveness (right answers).&nbsp;Trained humans were found to perform at a 88% to 97% effectiveness on similar data.</P>
<P></P>
<P></P>
<P align=right>Previous:&nbsp;<A href="/uwangel/section/content/default.asp?WCI=GOTO&amp;TYPE=PAGE&amp;MATCH=8b4%3A%20Connectionism%3A%20Multi-Layered%20Networks">Multi-Layered Networks</A>&nbsp;<FONT color=#000000><STRONG>|</STRONG> Next: <A href="/uwangel/section/content/default.asp?WCI=GOTO&amp;TYPE=PAGE&amp;MATCH=8b6%3A%20Connectionism%3A%20Gradient%20Descent">Gradient Descent</A></FONT></P></DIV></DIV>
    </div>


    
    
    <script  type="text/javascript" language="Javascript">
        setTimeout(function()
                    {
                        if (parent.parent.ANGEL && parent.parent.ANGEL.ui && parent.parent.ANGEL.ui.bc) 
                        { 
                            if(this.parent.name == "AngelContent")
                            {
                                parent.parent.ANGEL.ui.bc.update(this.parent); 
                            }
                            else if(this.name == "AngelContent")
                            {
                                parent.parent.ANGEL.ui.bc.update(this); 
                            }
                        }
                        document.close();
                    }
            ,0);
    </script>

        
                
    </div>
    </div>    
</body>
</html>
