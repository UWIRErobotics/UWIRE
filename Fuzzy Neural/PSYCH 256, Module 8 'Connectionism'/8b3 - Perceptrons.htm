<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head id="ctl00_ctl00_Head1"><title>
	PAGE: 8b3: Connectionism: Perceptrons
</title>
    <script language="javascript" type="text/javascript">
    var Page = function() { };
    </script>
    
    

<base href="https://uwangel.uwaterloo.ca/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a01AF/"></base>
<link rel="stylesheet" type="text/css" href="/AngelThemes/Stylesheets/Professional.css" /><link rel="stylesheet" type="text/css" href="/AngelThemes/Stylesheets/Professional.css" /><SCRIPT LANGUAGE="JavaScript">if(!run){ document.write('<SCRI' + 'PT LANGUAGE="JavaScript" src="/uwangel/jscript/Localization.js"><\/SCRIPT>'); var run = true; }</SCRIPT><script type="text/javascript" language="javascript" src="/uwangel/InlineEditor/fckeditor.js"></script><script type="text/javascript" language="javascript" src="/uwangel/InlineEditor/inline.asp"></script>

<script language="javascript" type="text/javascript">
<!--//
var gblnRefreshIndex = false;
var gstrAPI = '/uwangel/api/default.asp';
var gstrAngelApp = 'CRSCNT';
var gstrWCI = '';
var gstrWCE = '';
var gstrFinalWCI = '';
var gstrFinalWCE = '';
var gstrScriptURL = 'https://uwangel.uwaterloo.ca/uwangel/section/content/Default.asp?WCU=CRSCNT';
var gstrPostURL = '';
var gstrBaseHref = 'https://uwangel.uwaterloo.ca/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a01AF';
var gstrStylesheet = '/AngelThemes/Stylesheets/default.css';
var glngUserRights = 2;
var gstrUserID = 'jgorchyn';
var gstrSectionID = 'UW-MCL-C-090424-153038';
var gstrRootID = 'ROOT';
var gstrParentID = 'c3b34124d0b1213d494deb2bf10a0083';
var gstrObjectID = 'c3b34124d0b1213d494deb2bf10a01B0';
var gstrObjectType = 'PAGE';
var gstrBaseType = 'PAGE';
var gstrEntryID = 'c3b34124d0b1213d494deb2bf10a01AF';
var gstrEntrySection = 'UW-MCL-C-090424-153038';
var gstrEntryTitle = '8b3: Connectionism: Perceptrons';
var gstrBoardID = '';
var gstrBoardTitle = '';
var gstrShortcutID = '';
var gstrShortcuts = '';
var gblnSubmit = true;
var gblnForceSubmitting = false;

//The same variables, but in a hierarchical structure
var LO = (function(){
    var constructor = function(){
    }
    
    return constructor;
})();

LO.API = gstrAPI;
LO.angelApp = gstrAngelApp;
LO.scriptURL = gstrScriptURL;
LO.postURL = '';
LO.baseHref = gstrBaseHref;
LO.stylesheet = gstrStylesheet;
LO.userRights = glngUserRights;
LO.userID = gstrUserID;
LO.sectionID = gstrSectionID;
LO.rootID = gstrRootID;
LO.parentID = gstrParentID;
LO.objectID = gstrObjectID;
LO.objectType = gstrObjectType;
LO.baseType = gstrBaseType;
LO.entryID = gstrEntryID;
LO.entrySection = gstrEntrySection;
LO.entryTitle = gstrEntryTitle;

var LearningObject = LO;

//-->
</script></head>
<body id="c3b34124d0b1213d494deb2bf10a01AF" class="bodyLessons cmTypePAGE PGDISPLAY_PAGE PGDISPLAY_PAGE_RESPOND">
    
    


    <form name="aspnetForm" method="post" action="Page.aspx?EntryId=c3b34124d0b1213d494deb2bf10a01AF&amp;caller=%2fuwangel%2fsection%2fcontent%2fdefault.asp&amp;WCI=pgDisplay_Object&amp;WCU=CRSCNT&amp;Preview=0" id="aspnetForm">
<div>
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwULLTE2NDYyNDgyNTQPZBYCZg9kFgJmD2QWAgIKD2QWAgIDDw8WAh4HVmlzaWJsZWhkZGQ=" />
</div>


<script src="/uwangel/JScript/HelpPopup.js" type="text/javascript"></script>
<script src="/uwangel/jscript/jsActions.js" type="text/javascript"></script>
        <div class="normalDiv">
            <div class="normalSpan">
                <div id=”subject_image”></div>
                
    

    <div style="margin-top:.7em;width:100%">
        
    </div>

            </div>
        </div>
    

<script type="text/javascript">
//<![CDATA[
issueRedirect((parent && parent.location && parent.frames && parent.frames.length > 0 && parent.frames[0].name == 'lsn_header') ? parent : null);//]]>
</script>
</form>
    
    <div class="normalDiv">
    <div class="normalSpan">    
        
    
    <div id="ActionMessages"></div>
    
    <div class="normalSpan">
        <DIV>
<DIV id=row1>
<H3>8b3: Connectionism: Perceptrons</H3>
<P>In the 1950s and 60s, researchers like Frank Rosenblatt (1928&#8211;1969) investigated what are called <STRONG>perceptrons</STRONG>.&nbsp;A perceptron is a distributed connectionist network that has two layers of nodes, an input layer and an output layer.&nbsp;Rosenblatt demonstrated that such simple networks could <STRONG>compute simple propositional functions</STRONG> and, furthermore, <STRONG>learn</STRONG> some of them from examples.&nbsp;The prospect that a neural network could perform any task that a logic-based system could perform was an exciting one to be sure.</P>
<P>A perception is depicted in the figure below.</P>
<P><IMG alt="" hspace=50 src="/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a01AF/perceptron.PNG?5532" border=0></P>
<P>The two input nodes (I1 and I2) receive an activation level (from the programmer) and signal the output node (on the right) as determined by the connection weights (w1 and w2).&nbsp;The output node computes its activation level.&nbsp;All nodes in a perceptron use a threshold activation function that keeps them either &#8220;off&#8221; (level 0) or &#8220;on&#8221; (level 1).</P>
<P>Now, with the right set of connection weights, a perception can learn to produce output that is equivalent to <STRONG>computing simple functions of propositional logic</STRONG>.&nbsp;To see how this is possible, consider the figure below.</P>
<P><IMG alt="" hspace=50 src="/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a01AF/and_or_not.PNG?6418" border=0></P>
<P>In this figure, the 0s and 1s represent the activation levels of the input nodes.&nbsp;Both inputs are either 0, 1 or one of each.&nbsp;The dots in the figure represent the activation level of the output node: an empty dot represents a 0 output whereas a filled dot represents a 1 output.&nbsp;As you can see, the AND perceptron turns its output on if and only if both inputs are on.&nbsp;If we interpret on as &#8220;true&#8221; and off as &#8220;false&#8221;, then the network is computing the logical connective 11 &amp; 12.&nbsp;Something similar hold for the OR network and the NOT network (which requires only 1 input node).</P>
<P>Rosenblatt showed that a perceptron can <STRONG>learn</STRONG> to compute these functions by learning from examples.&nbsp;The procedure for teaching a perceptron is known as the <EM>perceptron learning principle</EM> (PLP).&nbsp;In effect, this learning procedure allows the perceptron to draw a line through the space of possible inputs and outputs (see the dashed lines in the figure above).&nbsp;As a result, these solutions are called <STRONG>linearly separable</STRONG>.&nbsp;One admirable fact about the PLP is that it was proven that a perceptron is guaranteed to find an appropriate division in the solution space of the problem at hand.&nbsp;The down side is that the PLP is unable to learn any divisions that require a <STRONG>non-linear separation</STRONG> of the solution space.</P>
<P>Minsky and Papert (1969) published a book on perceptrons in which they proved that there are some simple propositional functions that a perceptron <STRONG>cannot learn</STRONG>.&nbsp;The main example is known as &#8220;exclusive or&#8221; (XOR) such that A XOR B is true whenever A is true or B is true but not both.&nbsp;A look at the solution space (see the figure below) demonstrates why the perceptron can never learn this function.</P>
<P><IMG alt="" hspace=50 src="/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a01AF/xor.PNG?9600" border=0></P>
<P>No straight line can be drawn through this space that leaves all the empty dots on one side and all the filled dots on the other side.&nbsp;Of course, three perceptrons (for OR, AND, and NOT) can be linked together to compute the XOR function.&nbsp;The point is, though, that no perceptron can <STRONG>learn</STRONG> to compute this function from examples using the PLP.</P>
<P></P>
<P></P>
<P align=right>Previous:&nbsp;<A href="/uwangel/section/content/default.asp?WCI=GOTO&amp;TYPE=PAGE&amp;MATCH=8b2%3A%20Connectionism%3A%20Distributed%20Representation">Distributed Representations</A>&nbsp;<FONT color=#000000><STRONG>|</STRONG> Next: <A href="/uwangel/section/content/default.asp?WCI=GOTO&amp;TYPE=PAGE&amp;MATCH=8b4%3A%20Connectionism%3A%20Multi-Layered%20Networks">Multi-Layered Networks</A></FONT></P></DIV></DIV>
    </div>


    
    
    <script  type="text/javascript" language="Javascript">
        setTimeout(function()
                    {
                        if (parent.parent.ANGEL && parent.parent.ANGEL.ui && parent.parent.ANGEL.ui.bc) 
                        { 
                            if(this.parent.name == "AngelContent")
                            {
                                parent.parent.ANGEL.ui.bc.update(this.parent); 
                            }
                            else if(this.name == "AngelContent")
                            {
                                parent.parent.ANGEL.ui.bc.update(this); 
                            }
                        }
                        document.close();
                    }
            ,0);
    </script>

        
                
    </div>
    </div>    
</body>
</html>
