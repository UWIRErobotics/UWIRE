<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head id="ctl00_ctl00_Head1"><title>
	PAGE: 8b9: Connectionism: Representational Power
</title>
    <script language="javascript" type="text/javascript">
    var Page = function() { };
    </script>
    
    

<base href="https://uwangel.uwaterloo.ca/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a0088/"></base>
<link rel="stylesheet" type="text/css" href="/AngelThemes/Stylesheets/Professional.css" /><link rel="stylesheet" type="text/css" href="/AngelThemes/Stylesheets/Professional.css" /><SCRIPT LANGUAGE="JavaScript">if(!run){ document.write('<SCRI' + 'PT LANGUAGE="JavaScript" src="/uwangel/jscript/Localization.js"><\/SCRIPT>'); var run = true; }</SCRIPT><script type="text/javascript" language="javascript" src="/uwangel/InlineEditor/fckeditor.js"></script><script type="text/javascript" language="javascript" src="/uwangel/InlineEditor/inline.asp"></script>

<script language="javascript" type="text/javascript">
<!--//
var gblnRefreshIndex = false;
var gstrAPI = '/uwangel/api/default.asp';
var gstrAngelApp = 'CRSCNT';
var gstrWCI = '';
var gstrWCE = '';
var gstrFinalWCI = '';
var gstrFinalWCE = '';
var gstrScriptURL = 'https://uwangel.uwaterloo.ca/uwangel/section/content/Default.asp?WCU=CRSCNT';
var gstrPostURL = '';
var gstrBaseHref = 'https://uwangel.uwaterloo.ca/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a0088';
var gstrStylesheet = '/AngelThemes/Stylesheets/default.css';
var glngUserRights = 2;
var gstrUserID = 'jgorchyn';
var gstrSectionID = 'UW-MCL-C-090424-153038';
var gstrRootID = 'ROOT';
var gstrParentID = 'c3b34124d0b1213d494deb2bf10a0083';
var gstrObjectID = 'c3b34124d0b1213d494deb2bf10a0089';
var gstrObjectType = 'PAGE';
var gstrBaseType = 'PAGE';
var gstrEntryID = 'c3b34124d0b1213d494deb2bf10a0088';
var gstrEntrySection = 'UW-MCL-C-090424-153038';
var gstrEntryTitle = '8b9: Connectionism: Representational Power';
var gstrBoardID = '';
var gstrBoardTitle = '';
var gstrShortcutID = '';
var gstrShortcuts = '';
var gblnSubmit = true;
var gblnForceSubmitting = false;

//The same variables, but in a hierarchical structure
var LO = (function(){
    var constructor = function(){
    }
    
    return constructor;
})();

LO.API = gstrAPI;
LO.angelApp = gstrAngelApp;
LO.scriptURL = gstrScriptURL;
LO.postURL = '';
LO.baseHref = gstrBaseHref;
LO.stylesheet = gstrStylesheet;
LO.userRights = glngUserRights;
LO.userID = gstrUserID;
LO.sectionID = gstrSectionID;
LO.rootID = gstrRootID;
LO.parentID = gstrParentID;
LO.objectID = gstrObjectID;
LO.objectType = gstrObjectType;
LO.baseType = gstrBaseType;
LO.entryID = gstrEntryID;
LO.entrySection = gstrEntrySection;
LO.entryTitle = gstrEntryTitle;

var LearningObject = LO;

//-->
</script></head>
<body id="c3b34124d0b1213d494deb2bf10a0088" class="bodyLessons cmTypePAGE PGDISPLAY_PAGE PGDISPLAY_PAGE_RESPOND">
    
    


    <form name="aspnetForm" method="post" action="Page.aspx?EntryId=c3b34124d0b1213d494deb2bf10a0088&amp;caller=%2fuwangel%2fsection%2fcontent%2fdefault.asp&amp;WCI=pgDisplay_Object&amp;WCU=CRSCNT&amp;Preview=0" id="aspnetForm">
<div>
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwULLTE2NDYyNDgyNTQPZBYCZg9kFgJmD2QWAgIKD2QWAgIDDw8WAh4HVmlzaWJsZWhkZGQ=" />
</div>


<script src="/uwangel/JScript/HelpPopup.js" type="text/javascript"></script>
<script src="/uwangel/jscript/jsActions.js" type="text/javascript"></script>
        <div class="normalDiv">
            <div class="normalSpan">
                <div id=”subject_image”></div>
                
    

    <div style="margin-top:.7em;width:100%">
        
    </div>

            </div>
        </div>
    

<script type="text/javascript">
//<![CDATA[
issueRedirect((parent && parent.location && parent.frames && parent.frames.length > 0 && parent.frames[0].name == 'lsn_header') ? parent : null);//]]>
</script>
</form>
    
    <div class="normalDiv">
    <div class="normalSpan">    
        
    
    <div id="ActionMessages"></div>
    
    <div class="normalSpan">
        <DIV>
<DIV id=row1>
<H3>8b9: Connectionism: Representational Power</H3>
<P>Neural networks such as NETTalk and ALVINN (and localized networks such as those we discussed last time) seem to have acquired some form of <STRONG>knowledge</STRONG>.&nbsp;Two questions arise about the knowledge gained by a neural network:</P>
<OL>
<LI>What sort of knowledge is it?</LI>
<LI>How is that knowledge represented?</LI></OL>
<OL></OL>
<P>We will address both questions here.</P>
<P>First of all, the sort of knowledge acquired by an ANN resembles a library of <STRONG>concepts</STRONG>.&nbsp;That is, an ANN seems to gain the ability to <STRONG>classify inputs</STRONG> into certain categories represented by its output nodes.</P>
<OL>
<LI>In the case of NETTalk, the ANN learned to classify different combinations of inputs into categories of phonemes (sounds).</LI>
<LI>In the case of ALVINN, the ANN learned to classify different combinations of road paint and curvatures into categories of driving directions, e.g., turn left, go straight, turn right.</LI></OL>
<OL></OL>
<P>From a function perspective, the ANNs have simply acquired knowledge that is closely akin to that found in a frame-based system.&nbsp;Of course, a frame-based system is often simply given its store of concepts by a programmer.&nbsp;An ANN, however, has learned its concepts from examples.</P>
<P>A big difference between ANNs like NETTalk and ALVINN on the one hand and frame-based systems or even localized networks on the other hand is that their knowledge is represented in a distributed fashion.&nbsp;That is, <STRONG>each node in the hidden layer of an ANN typically participates in the production of several different outputs</STRONG>. Here is another way of looking at the matter: Each time a node in the output layer of an ANN is activated in response to an input, list the nodes in the hidden layer that are active and connected to it.&nbsp;You will find that these lists overlap.&nbsp;No node in the hidden layer corresponds to a unique node in the output layer.</P>
<P><IMG alt="" hspace=50 src="/AngelUploadsuwangel/Content/UW-MCL-C-090424-153038/_assoc/c3b34124d0b1213d494deb2bf10a0088/nodes.PNG?2909" border=0></P>
<P>In the figure above, you can see that at least two output nodes are being influenced by one node in the hidden layer.&nbsp;This sort of overlap explains why we say that representation is <STRONG>distributed</STRONG> throughout the network.</P>
<P>As you may recall, it is the connection weights that determine how a node influences other nodes in the network.&nbsp;Since the nodes themselves do not represent one or another concept exactly, then it is <STRONG>the connection weights that represent</STRONG> the knowledge acquired by the network.</P>
<P></P>
<P></P>
<P align=right>Previous:&nbsp;<A href="/uwangel/section/content/default.asp?WCI=GOTO&amp;TYPE=PAGE&amp;MATCH=8b8%3A%20Connectionism%3A%20ALVINN">ALVINN</A>&nbsp;<FONT color=#000000><STRONG>|</STRONG> Next: <A href="/uwangel/section/content/default.asp?WCI=GOTO&amp;TYPE=PAGE&amp;MATCH=8b10%3A%20Connectionism%3A%20Systematicity">Systematicity</A></FONT></P></DIV></DIV>
    </div>


    
    
    <script  type="text/javascript" language="Javascript">
        setTimeout(function()
                    {
                        if (parent.parent.ANGEL && parent.parent.ANGEL.ui && parent.parent.ANGEL.ui.bc) 
                        { 
                            if(this.parent.name == "AngelContent")
                            {
                                parent.parent.ANGEL.ui.bc.update(this.parent); 
                            }
                            else if(this.name == "AngelContent")
                            {
                                parent.parent.ANGEL.ui.bc.update(this); 
                            }
                        }
                        document.close();
                    }
            ,0);
    </script>

        
                
    </div>
    </div>    
</body>
</html>
